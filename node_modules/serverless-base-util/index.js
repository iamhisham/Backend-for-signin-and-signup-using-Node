const express = require("express");
const bodyParser = require("body-parser");
const serverless = require("serverless-http");
const { Response } = require("./response/Response");

/*To avoid the application on crash during UnCaught Exception Occurs*/
process.on("uncaughtException", function (error) {
  console.error("Uncaught Exception => ", error);
});

const app = express();
app.use(bodyParser.json({ limit: "10mb" }));

var database = {};

if (process.env.ALLOW_ORIGIN) {
  //Handle Cors Issue
  app.use(function (req, res, next) {
    res.append('Access-Control-Allow-Origin', process.env.ALLOW_ORIGIN.split(","));
    res.append('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
    res.append('Access-Control-Allow-Headers', 'Content-Type');
    next();
  });
}

var initDatabase = async () => {
  if (!database.isConnectionCreated) {
    await database.init();
    if (!database.isConnectionCreated) {
      return { statusCode: 500, message: database.errorMessage };
    }
  }
  return { statusCode: 200 };
}

if (process.env.EXCLUDE_DB != "TRUE") {
  //Initilize DB Connection
  database = require("./database/Database.js");
  app.use(async function (req, res, next) {
    const { statusCode, message } = await initDatabase();
    if (statusCode == 200) next();
    else {
      res.status(500);
      res.json({ message });
    }
  });
}

global.baseUtilRequire = (name) => {
  return require(name);
};

global.convertToString = (data) => {
  if (typeof (data) == "string") {
    return data;
  } else if (typeof (data) == "number") {
    return data.toString();
  } else {
    return JSON.stringify(data);
  }
};

global.returnResponse = (req, res, promise) => {
  res.type("application/json");

  const context = (req.apiGateway || {}).context || {};
  if (context.awsRequestId) res.setHeader("x-service-request-id", context.awsRequestId);
  if (context.logStreamName) res.setHeader("x-invocation-id", context.logStreamName.split("[$LATEST]")[1]);

  const setResponseHeaders = function (result) {
    if (result.headers) {
      Object.keys(result.headers).forEach(key => res.setHeader(key, result.headers[key]));
    }
  };

  const processError = (err) => {
    console.error("Error occured: ", err);
    res.status(err.statusCode || 500);
    var errResp = err.message ? { message: err.message } : err;
    if (err.CUSTOM_ERROR_CODE) errResp.CUSTOM_ERROR_CODE = err.CUSTOM_ERROR_CODE;
    res.json(errResp);
  };

  if (promise instanceof Promise) {
    promise.then(result => {
      res.status(result.statusCode || 200);
      if (result instanceof Response) {
        if (result.isSendResponseAsFile) {
          res.type("");
          res.sendFile(result.fileName, { root: result.filePath });
        } else {
          setResponseHeaders(result);
          res.json(result.getBody());
        }
      } else {
        res.json(result.statusCode ? result.data : result);
      }
    }).catch(err => processError(err));
  } else processError(promise);
};

var SQSCallback = async () => { return { statusCode: 404 } };
var EventCallback = async () => { return { statusCode: 404 } };

module.exports = {
  DB: database.db,
  Util: require("./util/Util.js"),
  CustomException: require("./exception/Exception.js"),
  Response,
  registerDBTables: function (initDBTables) {
    database.initDBTables = initDBTables;
  },
  register: function (path, callback) {
    app.use(path, callback(express.Router()));
  },
  registerEventHandler: function (callback) {
    EventCallback = callback;
  },
  registerSQSHandler: function (callback) {
    SQSCallback = callback;
  },
  startApplication: function (port, callback) {
    app.listen(port, callback);
  },
  startServerlessApplication: function () {
    const handler = serverless(app);
    return async (event, context) => {
      if (event.requestContext && event.requestContext.apiId) {
        return await handler(event, context);
      } else if (event.Records && Object.keys(event).length == 1) {
        const result = await initDatabase();
        if (result.statusCode == 200) {
          return await SQSCallback(event.Records);
        } else return result;
      } else if (event.event_type) {
        const result = await initDatabase();
        if (result.statusCode == 200) {
          return await EventCallback(event.event_type, event.payload);
        } else return result;
      } else return { statusCode: 404 };
    }
  }
};